// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
       jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.8.0-rc2'
    }
}

def libPath = file("source/obj/local").absolutePath

allprojects {
    repositories {
        jcenter()
    }

    model {
        repositories {
            libs(PrebuiltLibraries) {
                assimp {
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${libPath}/${targetPlatform.getName()}/libassimp.a")
                    }

                    headers.srcDir 'jni/3rdparty/assimp/include'
                }

                minizip {
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${libPath}/${targetPlatform.getName()}/libminizip.a")
                    }
                }

                stb {
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${libPath}/${targetPlatform.getName()}/libstb.a")
                    }
                }

                nanovg {
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${libPath}/${targetPlatform.getName()}/libnanovg.a")
                    }
                }

                freetype2 {
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${libPath}/${targetPlatform.getName()}/libfreetype2.a")
                    }

                    headers.srcDir 'jni/3rdparty/freetype2/include'
                }
            }
        }

        android {
            compileSdkVersion = 19
            buildToolsVersion = '23.0.3'

            defaultConfig {
                minSdkVersion.apiLevel = 19
                targetSdkVersion.apiLevel = 19
            }

            ndk {
                platformVersion = 19
                stl = 'gnustl_shared'

                abiFilters.add('armeabi-v7a')

                cppFlags.add('-std=c++11')
                cppFlags.add('-Wall')
                cppFlags.add('-Wextra')
                cppFlags.add('-Werror')
                cppFlags.add('-Wno-strict-aliasing')

                ldLibs.addAll(['log', 'android', 'EGL', 'GLESv3', 'OpenMAXAL', 'OpenSLES', 'z'])
            }
        }
    }
}
